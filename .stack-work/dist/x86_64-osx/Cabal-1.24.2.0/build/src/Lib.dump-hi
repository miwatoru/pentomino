
==================== FINAL INTERFACE ====================
2017-10-25 14:19:10.407742 UTC

interface pentomino-0.1.0.0-a9DLXPciexF1Qvu0n7WfA:Lib 8002
  interface hash: 099b25aa071984bd118d1fe093b7c3c6
  ABI hash: 65b3745b5ed463390640182a8531b2be
  export-list hash: 51c50a539ea06fe6bb861ead48928341
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.alignP
  Lib.genSetP
  Lib.rot90P
  Lib.solve
  Lib.Point{Lib.Point}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fEqPoint :: GHC.Classes.Eq Lib.Point
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Point Lib.$fEqPoint_$c== Lib.$fEqPoint_$c/= -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fEqPoint_$c/= :: Lib.Point -> Lib.Point -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Point) (w1 :: Lib.Point) ->
                 case w of ww { Lib.Point ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Lib.Point ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Lib.$w$c/= ww4 ww2 ww9 ww7 } } } }) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fEqPoint_$c== :: Lib.Point -> Lib.Point -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Point) (w1 :: Lib.Point) ->
                 case w of ww { Lib.Point ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Lib.Point ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Lib.$w$c== ww4 ww2 ww9 ww7 } } } }) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fOrdPoint :: GHC.Classes.Ord Lib.Point
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Point
                  Lib.$fEqPoint
                  Lib.$fOrdPoint_$ccompare
                  Lib.$fOrdPoint_$c<
                  Lib.$fOrdPoint_$c<=
                  Lib.$fOrdPoint_$c>
                  Lib.$fOrdPoint_$c>=
                  Lib.$fOrdPoint_$cmax
                  Lib.$fOrdPoint_$cmin -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fOrdPoint_$c< :: Lib.Point -> Lib.Point -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Point) (w1 :: Lib.Point) ->
                 case w of ww { Lib.Point ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Lib.Point ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Lib.$w$c< ww4 ww2 ww9 ww7 } } } }) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fOrdPoint_$c<= :: Lib.Point -> Lib.Point -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Point) (w1 :: Lib.Point) ->
                 case w of ww { Lib.Point ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Lib.Point ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Lib.$w$c<= ww4 ww2 ww9 ww7 } } } }) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fOrdPoint_$c> :: Lib.Point -> Lib.Point -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Point) (w1 :: Lib.Point) ->
                 case w of ww { Lib.Point ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Lib.Point ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Lib.$w$c> ww4 ww2 ww9 ww7 } } } }) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fOrdPoint_$c>= :: Lib.Point -> Lib.Point -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Point) (w1 :: Lib.Point) ->
                 case w of ww { Lib.Point ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Lib.Point ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Lib.$w$c>= ww4 ww2 ww9 ww7 } } } }) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fOrdPoint_$ccompare ::
    Lib.Point -> Lib.Point -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Point) (w1 :: Lib.Point) ->
                 case w of ww { Lib.Point ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Lib.Point ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Lib.$w$ccompare ww4 ww2 ww9 ww7 } } } }) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fOrdPoint_$cmax :: Lib.Point -> Lib.Point -> Lib.Point
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Point) (w1 :: Lib.Point) ->
                 case w of ww { Lib.Point ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Lib.Point ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww9) of wild1 {
                        GHC.Types.False -> Lib.Point (GHC.Types.I# ww4) ww2
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.I# x ->
                           case ww7 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False -> Lib.Point (GHC.Types.I# ww4) wild2
                             GHC.Types.True -> Lib.Point (GHC.Types.I# ww9) wild3 } } } }
                   GHC.Types.True -> Lib.Point (GHC.Types.I# ww9) ww7 } } } } }) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fOrdPoint_$cmin :: Lib.Point -> Lib.Point -> Lib.Point
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Lib.Point) (w1 :: Lib.Point) ->
                 case w of ww { Lib.Point ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Lib.Point ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww9) of wild1 {
                        GHC.Types.False -> Lib.Point (GHC.Types.I# ww9) ww7
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.I# x ->
                           case ww7 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False -> Lib.Point (GHC.Types.I# ww9) wild3
                             GHC.Types.True -> Lib.Point (GHC.Types.I# ww4) wild2 } } } }
                   GHC.Types.True -> Lib.Point (GHC.Types.I# ww4) ww2 } } } } }) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fShowPoint :: GHC.Show.Show Lib.Point
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Point
                  Lib.$fShowPoint_$cshowsPrec
                  Lib.$fShowPoint_$cshow
                  Lib.$fShowPoint_$cshowList -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fShowPoint1 :: Lib.Point -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.Point) (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.Point ww1 ww2 ->
                 Lib.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
fb5865b6429931044c2cbb70dbb9207d
  $fShowPoint2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Point "#) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fShowPoint_$cshow :: Lib.Point -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Point) ->
                 Lib.$fShowPoint_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fShowPoint_$cshowList :: [Lib.Point] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Lib.Point Lib.$fShowPoint1) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  $fShowPoint_$cshowsPrec ::
    GHC.Types.Int -> Lib.Point -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.Point)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.Point ww3 ww4 ->
                 Lib.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
5e3525911d293e46a7743a28a10cb851
  $tc'Point :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8179550781221581312##
                   16529956603448388657##
                   Lib.$trModule
                   Lib.$tc'Point1) -}
115c3a82b224df03eaa8826418501886
  $tc'Point1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Point"#) -}
71f3e108264de1dfd769cce2b1b3c185
  $tcPoint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12009382803937260836##
                   4635067901469371014##
                   Lib.$trModule
                   Lib.$tcPoint1) -}
b3b2a5e84d9f7aab178a7595ba947026
  $tcPoint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Point"#) -}
ae29fa996b42e787936d4cf7c19b88ed
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
3d0f90736f44f8e174e5143758faf1cd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
873839167e1ee6daf357a359c3ae5bdd
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pentomino-0.1.0.0-a9DLXPciexF1Qvu0n7WfA"#) -}
46cf66ab309de348b7a69a1372e45d52
  $w$c/= ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww3 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
c435335e84bd6cd8eb5c5b07cb0941bf
  $w$c< ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.ltInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.True }) -}
ff1fa51908a7f0c4cc17418b31d4e65e
  $w$c<= ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.leInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.True }) -}
4660b0d652b0d9aab46f37f7f4836af6
  $w$c== ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqInt ww1 ww3 }) -}
000695c16b94be2a2a611e80396cdf8c
  $w$c> ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Classes.gtInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.False }) -}
091590ec8c574478260ba383048d689d
  $w$c>= ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Classes.geInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.False }) -}
9e527eeb7be885f97e7d6eef552cf5e5
  $w$ccompare ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True -> GHC.Classes.compareInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.LT }) -}
0a07e2e0757a4f4e488ddb952f2be062
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     case ww1 of ww3 { GHC.Types.I# ww4 ->
                     case GHC.Show.$wshowSignedInt
                            11#
                            ww4
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case ww2 of ww5 { GHC.Types.I# ww6 ->
                                case GHC.Show.$wshowSignedInt 11# ww6 x of ww7 { (#,#) ww8 ww9 ->
                                GHC.Types.:
                                  @ GHC.Types.Char
                                  ww8
                                  ww9 } })) of ww5 { (#,#) ww6 ww7 ->
                     GHC.Types.: @ GHC.Types.Char ww6 ww7 } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++ @ GHC.Types.Char Lib.$fShowPoint2 (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Lib.$fShowPoint2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
4f7618fc2eff7ee54d5f7990dfa48b5c
  data Point = Point GHC.Types.Int GHC.Types.Int
8a96eb3a8d5f58f083c365df40d4a488
  alignP :: [Lib.Point] -> [Lib.Point]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (p :: [Lib.Point]) ->
                 Data.OldList.sortBy
                   @ Lib.Point
                   Lib.$fOrdPoint_$ccompare
                   (GHC.Base.map
                      @ Lib.Point
                      @ Lib.Point
                      (let {
                         ds :: Lib.Point = Lib.cornerP p
                       } in
                       \ (ds1 :: Lib.Point) ->
                       case ds of wild { Lib.Point offsetx offsety ->
                       case ds1 of wild1 { Lib.Point x y ->
                       Lib.Point
                         (GHC.Num.$fNumInt_$c- x offsetx)
                         (GHC.Num.$fNumInt_$c- y offsety) } })
                      p)) -}
2663deb85e3b6044abfe2462a2e4dae0
  cornerP :: [Lib.Point] -> Lib.Point
  {- Arity: 1, Strictness: <S,1*U> -}
f69dba54dc945cbf0bae102bb67b4c13
  genSetP :: [Lib.Point] -> [[Lib.Point]]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (p :: [Lib.Point]) ->
                 Data.OldList.nubBy
                   @ [Lib.Point]
                   Lib.genSetP7
                   (GHC.Types.:
                      @ [Lib.Point]
                      (Lib.alignP p)
                      (GHC.Types.:
                         @ [Lib.Point]
                         (Lib.rot90P p)
                         (GHC.Types.:
                            @ [Lib.Point]
                            (Lib.alignP (GHC.Base.map @ Lib.Point @ Lib.Point Lib.genSetP6 p))
                            (GHC.Types.:
                               @ [Lib.Point]
                               (Lib.alignP (GHC.Base.map @ Lib.Point @ Lib.Point Lib.genSetP5 p))
                               (GHC.Types.:
                                  @ [Lib.Point]
                                  (Lib.alignP (GHC.Base.map @ Lib.Point @ Lib.Point Lib.genSetP4 p))
                                  (GHC.Types.:
                                     @ [Lib.Point]
                                     (Lib.alignP
                                        (GHC.Base.map @ Lib.Point @ Lib.Point Lib.genSetP3 p))
                                     (GHC.Types.:
                                        @ [Lib.Point]
                                        (Lib.alignP
                                           (GHC.Base.map @ Lib.Point @ Lib.Point Lib.genSetP2 p))
                                        (GHC.Types.:
                                           @ [Lib.Point]
                                           (Lib.alignP
                                              (GHC.Base.map @ Lib.Point @ Lib.Point Lib.genSetP1 p))
                                           (GHC.Types.[] @ [Lib.Point])))))))))) -}
07d2e83b99356c8f2eef0382dc0a1576
  genSetP1 :: Lib.Point -> Lib.Point
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Lib.Point) ->
                 Lib.Point
                   (case x of wild { Lib.Point x1 y ->
                    case y of wild1 { GHC.Types.I# x2 ->
                    GHC.Types.I# (GHC.Prim.negateInt# x2) } })
                   (case x of wild { Lib.Point x1 y ->
                    case x1 of wild1 { GHC.Types.I# x2 ->
                    GHC.Types.I# (GHC.Prim.negateInt# x2) } })) -}
439f73c83f708649d423caeb826327d1
  genSetP2 :: Lib.Point -> Lib.Point
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Lib.Point) ->
                 Lib.Point
                   (case x of wild { Lib.Point x1 y -> x1 })
                   (case x of wild { Lib.Point x1 y ->
                    case y of wild1 { GHC.Types.I# x2 ->
                    GHC.Types.I# (GHC.Prim.negateInt# x2) } })) -}
7df9bfd920b05b501b8d5f0172ffbd3c
  genSetP3 :: Lib.Point -> Lib.Point
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Lib.Point) ->
                 Lib.Point
                   (case x of wild { Lib.Point x1 y -> y })
                   (case x of wild { Lib.Point x1 y -> x1 })) -}
4f91aac0e0595c723fd7864ac173c91d
  genSetP4 :: Lib.Point -> Lib.Point
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U(U),1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: Lib.Point) ->
                 Lib.Point
                   (case p of wild { Lib.Point x y ->
                    case x of wild1 { GHC.Types.I# x1 ->
                    GHC.Types.I# (GHC.Prim.negateInt# x1) } })
                   (case p of wild { Lib.Point x y -> y })) -}
35258c95caee8dc406e2636284c01793
  genSetP5 :: Lib.Point -> Lib.Point
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Lib.Point) ->
                 Lib.Point
                   (case x of wild { Lib.Point x1 y -> y })
                   (case x of wild { Lib.Point x1 y ->
                    case x1 of wild1 { GHC.Types.I# x2 ->
                    GHC.Types.I# (GHC.Prim.negateInt# x2) } })) -}
869ec65be43fd1f1ad9508f7edde4198
  genSetP6 :: Lib.Point -> Lib.Point
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Lib.Point) ->
                 Lib.Point
                   (case x of wild { Lib.Point x1 y ->
                    case x1 of wild1 { GHC.Types.I# x2 ->
                    GHC.Types.I# (GHC.Prim.negateInt# x2) } })
                   (case x of wild { Lib.Point x1 y ->
                    case y of wild1 { GHC.Types.I# x2 ->
                    GHC.Types.I# (GHC.Prim.negateInt# x2) } })) -}
e40e103422b5723e52900e73c854bf1b
  genSetP7 :: [Lib.Point] -> [Lib.Point] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fEq[]_$c== @ Lib.Point Lib.$fEqPoint) -}
aa2f4dabdb39632949fcf7c8d078e151
  rot90P :: [Lib.Point] -> [Lib.Point]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Lib.Point]) ->
                 Lib.alignP
                   (GHC.Base.build
                      @ Lib.Point
                      (\ @ b1 (c :: Lib.Point -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Lib.Point
                         @ b1
                         (GHC.Base.mapFB @ Lib.Point @ b1 @ Lib.Point c Lib.rot90P1)
                         n
                         x))) -}
f6daf5e6806a92084747802f694a24bc
  rot90P1 :: Lib.Point -> Lib.Point
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: Lib.Point) ->
                 Lib.Point
                   (case p of wild { Lib.Point x y ->
                    case y of wild1 { GHC.Types.I# x1 ->
                    GHC.Types.I# (GHC.Prim.negateInt# x1) } })
                   (case p of wild { Lib.Point x y -> x })) -}
4ca9e0960706b5b2efac248005adcf09
  solve :: [Lib.Point] -> [[[Lib.Point]]] -> [[[Lib.Point]]]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
instance [safe] GHC.Classes.Eq [Lib.Point] = Lib.$fEqPoint
instance [safe] GHC.Classes.Ord [Lib.Point] = Lib.$fOrdPoint
instance [safe] GHC.Show.Show [Lib.Point] = Lib.$fShowPoint
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

